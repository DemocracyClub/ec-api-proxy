version: 2.1

orbs:
  python: circleci/python@0.2.1
  codecov: codecov/codecov@3.2.4

commands:
  install_uv:
    steps:
      - run: pip install --upgrade uv"==0.8.*"

jobs:
  install_and_update_dependencies:
    docker:
    - image: cimg/python:3.12
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        keys:
        - v7-dependencies-{{ checksum "uv.lock" }}
        - v7-dependencies-default
    - install_uv
    - run: uv sync --dev --no-python-downloads
    - run: make lambda-layers/DependenciesLayer/requirements.txt
    - run: make api_endpoints/api_auth/requirements.txt
    - run: make api_endpoints/v1_postcode_lookup/requirements.txt
    - run: uv cache prune --ci
    - persist_to_workspace:
        root: ~/repo/
        paths:
          - lambda-layers/DependenciesLayer/requirements.txt
          - api_endpoints/api_auth/requirements.txt
          - api_endpoints/v1_postcode_lookup/requirements.txt
    - save_cache:
        when: on_success
        paths:
          - ./.venv
          - $HOME/.cache/uv
        key: v7-dependencies-{{ checksum "uv.lock" }}

  run-tests:
    docker:
    - image: cimg/python:3.12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v7-dependencies-{{ checksum "uv.lock" }}
          - v7-dependencies-default
      - install_uv
      - run:
          name: Ruff Check
          command: uv run ruff check .
      - run:
          name: Ruff format
          command: uv run ruff format . --check
      - run: git ls-files '*.html' | xargs uv run djhtml --check
      - run: uv lock --locked
      - run: uv run python manage.py check
      - run: uv run python manage.py makemigrations --check
      - run: uv run python manage.py collectstatic --noinput --clear
      - run:
          name: Run Tests
          command: uv run pytest --junitxml=test-results/junit.xml --cov --ruff
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results
      - codecov/upload:
          file:  /home/circleci/repo/test-results/junit.xml

  sam_build:
    docker:
    - image: public.ecr.aws/sam/build-python3.12:latest
    working_directory: ~/repo
    steps:
    - checkout
    - attach_workspace:
        at: ~/repo/
    - run: pip install --upgrade pip setuptools
    - run: pip install -r lambda-layers/DependenciesLayer/requirements.txt
    - run: make collectstatic
    - run: sam build ${DASH_DASH_DEBUG}
    - persist_to_workspace:
        root: ~/repo/
        paths: [ .aws-sam/build/ ]

  sam_deploy:
    docker:
    - image: cimg/python:3.12
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
      dc-django-settings-module:
        type: string
      dc-deploy-name:
        type: string
    environment:
      DJANGO_SETTINGS_MODULE: "<<parameters.dc-django-settings-module>>"
      SAM_CONFIG_FILE: samconfig.toml.d/ci-<<parameters.dc-environment>>.toml
      DC_ENVIRONMENT: <<parameters.dc-environment>>
      SAM_LAMBDA_FUNCTION_CONFIG_ENV: <<parameters.dc-environment>>-cloudfront-lambda-functions
      DC_DEPLOY_NAME: <<parameters.dc-deploy-name>>
      POSTGRES_DATABASE_NAME: <<parameters.dc-deploy-name>>
    steps:
    - checkout
    - attach_workspace:
        at: ~/repo/
    - restore_cache:
        keys:
        - v7-dependencies-{{ checksum "uv.lock" }}
        - v7-dependencies-default
    - install_uv
    - run: pip install aws-sam-cli

    - run: printenv DC_DEPLOY_NAME DJANGO_SETTINGS_MODULE SAM_CONFIG_FILE DC_ENVIRONMENT
    - run: printenv SECRET_KEY | md5sum
    - run: printenv AWS_ACCESS_KEY_ID | md5sum
    - run: sudo apt update && sudo apt install postgresql-client
    - run: PGPASSWORD=$POSTGRES_PASSWORD createdb --host $POSTGRES_HOST --username postgres $POSTGRES_DATABASE_NAME || true
    - run:
        name: "sam deploy # App: Lambda + API Gateway"
        command: |
          sam deploy ${DASH_DASH_DEBUG} \
            --config-file ~/repo/${SAM_CONFIG_FILE} \
            --config-env $DC_ENVIRONMENT \
            --template-file ~/repo/.aws-sam/build/template.yaml \
            --parameter-overrides " \
               AppDjangoSettingsModule=$DJANGO_SETTINGS_MODULE \
               AppSecretKey='$SECRET_KEY' \
               AppSentryDSN='$SENTRY_DSN' \
               GitHash='$CIRCLE_SHA1' \
               AppIsBehindCloudFront=True \
               AppLogRetentionDays=60 \
               AppPostgresHost='$POSTGRES_HOST' \
               AppPostgresDatabaseName='$POSTGRES_DATABASE_NAME' \
               AppPostgresPassword='$POSTGRES_PASSWORD' \
               AppWidgetS3URL='$WIDGET_S3_URL' \
               AppDCAPIToken='$DC_API_TOKEN' \
               AppDomain='$PUBLIC_FQDN' \
              "
        no_output_timeout: 30m
    - run: uv run python manage.py migrate --noinput
    - run:
        name: "sam deploy lambda@edge function"
        command: |
          sam deploy \
            --config-file ~/repo/${SAM_CONFIG_FILE} \
            --config-env $SAM_LAMBDA_FUNCTION_CONFIG_ENV

    - run:
        name: printenv PUBLIC_FQDN CERTIFICATE_ARN
          # These envvars are stored inside CircleCI, which helpfully masks them if they're echoed.
        command: |
          #
          # NB Do *not* copy any of these string values!
          #  -> In order to make them visible inside CircleCI, a null character
          #  -> has been inserted between characters 1 and 2, which may have
          #  -> unintended consequences if you copy & paste them.
          #
          printenv PUBLIC_FQDN CERTIFICATE_ARN | sed -E 's/^(.)(.)/\1\x00\2/'
    - run:
        name: "sam deploy # Public access: CDN + DNS"
        no_output_timeout: 20m # CloudFront can take longer than CircleCI's 10m default
        command: |
          sam deploy ${DASH_DASH_DEBUG} \
            --config-file ~/repo/${SAM_CONFIG_FILE} \
            --config-env ${DC_ENVIRONMENT}-public-access \
            --template-file ~/repo/public-access-template.yaml \
            --parameter-overrides " \
               StackNameSuffix=<<parameters.dc-environment>> \
               CertificateArn=$CERTIFICATE_ARN \
               PublicFqdn=$PUBLIC_FQDN \
               AuthHeaderToQueryStringARN=`python .circleci/get_cf_export_value.py AuthHeaderToQueryString` \
              "
    - run:
        name: "Publish a new Sentry Release"
        command: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli releases --org democracy-club-gp new $CIRCLE_SHA1 --project ec-api
          sentry-cli releases --org democracy-club-gp set-commits --auto $CIRCLE_SHA1
          sentry-cli releases --org democracy-club-gp finalize $CIRCLE_SHA1

workflows:
  main:
    jobs:
      - install_and_update_dependencies
      - run-tests:
          requires:
          - install_and_update_dependencies # tests need installed dev package set

      - sam_build:
          requires:
            - install_and_update_dependencies # DependenciesLayer build needs lambda-layers/DependenciesLayer/requirements.txt
            - run-tests                            # Function build needs aggregator/apps/api/v1/templates/api_docs_rendered.html


      - sam_deploy:
          name: sam_deploy_staging
          dc-environment: staging
          dc-deploy-name: staging
          dc-django-settings-module: ec_api.settings.base_lambda
          requires:
            - install_and_update_dependencies # SAM CLI is in the dev package set
            - run-tests                            # staging should only deploy if tests pass
            - sam_build                       # deploy needs .aws-sam/build/
          context: [ deployment-staging-ec-api ]
          filters: { branches: { only: [ /stage-deploy-.*/, main ] } }

      - sam_deploy:
          name: sam_deploy_production
          dc-environment: production
          dc-deploy-name: production
          dc-django-settings-module: ec_api.settings.base_lambda
          requires:
            - install_and_update_dependencies # SAM CLI is in the dev package set
            - run-tests                            # staging should only deploy if tests pass
            - sam_build                       # deploy needs .aws-sam/build/
            - sam_deploy_staging
          context: [ deployment-production-ec-api ]
          filters: { branches: { only: [ main ] } }
